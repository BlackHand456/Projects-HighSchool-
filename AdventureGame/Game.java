import java.util.Random;import javax.swing.JOptionPane;/**  * In this game your goal is to complete all of the quests. To play it you must access the play class rather than this one. * This game specifically has multiple special features including a map that shows your location during the game. * Also, items and events are part of the room's description rather than being found with a simple look command. * This game also has set locations but most rooms are randomly generated with each playthrough creating a replayability factor. *   *  @author  Evan Brown *  @version 1.0 */class Game {    private Parser parser;    private Room currentRoom;//current room    private Room newLastRoom;//a variable allowing back to work more than once    private Room r01 = new Room("",0,1,0);//room 1...    private Room r02 = new Room("",0,1,0);    private Room r03 = new Room("",0,1,0);    private Room r04 = new Room("",0,1,0);    private Room r05 = new Room("",0,1,0);    private Room r06 = new Room("",0,1,0);    private Room r07 = new Room("",0,1,0);    private Room r08 = new Room("",0,1,0);    private Room r09 = new Room("",0,1,0);    private Room r10 = new Room("",0,1,0);    private Room r11 = new Room("",0,1,0);    private Room r12 = new Room("",0,1,0);    private Room r13 = new Room("",0,0,0);    private Room r14 = new Room("",0,1,0);    private Room r15 = new Room("",0,1,0);    private Room r16 = new Room("",0,1,0);    private Room r17 = new Room("",0,0,0);    private Room r18 = new Room("",0,1,0);    private Room r19 = new Room("",0,1,0);    private Room r20 = new Room("",0,0,0);    private Room r21 = new Room("",0,0,0);    private Room r22 = new Room("",0,0,0);    private Room r23 = new Room("",0,1,0);    private Room r24 = new Room("",0,1,0);    private Room r25 = new Room("",0,1,0);    private Room r26 = new Room("",0,1,0);    private Room r27 = new Room("",0,1,0);    private Room r28 = new Room("",0,1,0);    private Room r29 = new Room("",0,0,0);    private Room r30 = new Room("",0,1,0);    private Room r31 = new Room("",0,1,0);    private Room r32 = new Room("",0,1,0);    private Room r33 = new Room("",0,1,0);    private Room r34 = new Room("",0,1,0);    private Room r35 = new Room("",0,1,0);    private Room r36 = new Room("",0,1,0);    private Room r37 = new Room("",0,1,0);    private Room r38 = new Room("",0,1,0);    private Room r39 = new Room("",0,1,0);    private Room r40 = new Room("",0,1,0);    private Room r41 = new Room("",0,2,0);//... room 41    private Room jail = new Room("",0,1,0);//jail which is a room that is separate from the default map    private Room secretRoom = new Room("",0,1,0);//secret room which must be found    private String inventory = " ";//a string that holds the items the player picks up    private String inventoryCopy = " ";//a string that allows for a player to retrieve their items after leaving jail    private String item = "";//a string used to randomly generate items for rooms    private String event = "";//a string used to randomly generate events for rooms    private String disease = "";//a string used to randomly generate diseases fro the corpse    private String wares = "";//a string used to randomly generate items for the merchant or shopkeeper    private Room lastRoom;//the last room one was in    private String itemList = " stick sword rock torch note gem key inkwell lockpick shield gold meat shovel pick holywater potion spellbook map pile-of-gold oil documents ";//a list of all valid items in the game    private String eventList = " goblin bandit strange-rock corpse strange-plant shopkeeper merchant door man creature animals goblins goblin-king ghost bandits table dark priest guards people servant mage ";//a list of all valid events in the game    private final int CARRYING_CAPACITY = 10;//the max wieght one can carry    private final int MAX_USE_OF_EVENT = 1;//the max times one can interact with an event    private int itemNum = 0;//the number of items one is carrying    private int goldNum = 0;//the amount of gold one is carrying    private String mapImage = "";//the string used to make the map    private String questLog = "";//the string that quests are added to    private String quest1 = "Go to the room 17 on your map as you feel it might have a clue to your identity.\n";//quest 1 ...    private String quest2 = "Find something to remove the curse from the creature in the small house.\n";    private String quest3 = "Go to jail and speak with the old advisor to the king.\n";    private String quest4 = "Go to the castle and try to get the king to listen to your warning.\n";    private String quest5 = "Make a super-potion by giving the ingredients to the priest to heal the king's wife and gain his trust. Ingredients: potion, grand-gem, herb, ectoplasm, and a goblin-king-eye.\n";    private String quest6 = "Escape the evil mage's lair with proof of his villainy and bring it to the king.\n";//... quest 6    private String randDescription = "";//the string for randomly generating a description for rooms    private int location = 1;//your location used for the map    private boolean dead = false;//to check if your dead and is used alongside finished for ending the game    private int whetherHasBeenInR17 = 0;//checks if you've been in room 17 so that you will only get the second quest once    private int r1Count = 0;//amount of rooms with description 1 ...    private int r2Count = 0;    private int r3Count = 0;    private int r4Count = 0;    private int r5Count = 0;    private int r6Count = 0;    private int r7Count = 0;    private int r8Count = 0;    private int r9Count = 0;    private int r10Count = 0;    private int r11Count = 0;    private int r12Count = 0;    private int r13Count = 0;    private int r14Count = 0;//... amount of rooms with description 14    private boolean goblinsDead = false;//checks if the goblins are dead which is necessary to allow you to fight the goblin king    private boolean banditsDead = false;//checks if the bandits are dead so that you can complete the quest for the ghost    private int spellbookCount = 0;//whether you've ever had the spellbook    private int spokenToMan = 0;//whether you've spoken to the man from the third quest so that you can't do it repeatedly    private int hasQuest1 = 0;//checks whether you have quest 1    private boolean noticed = false;//whether you've been noticed starts countdown for final quest    private int captureCount = 0;//whther you've been captured    private boolean end = false;//whether you are done    private boolean finished = false;//whether you are done    private String lastCommand;//the most recent item one picked up    /**     * Create the game and initialise its internal map.     */    public Game()     {        parser = new Parser();    }    /**     * Sets up the game for replaying by resetting variables.     */    private void setUp()    {        finished = false;        end = false;        captureCount = 0;        noticed = false;        goblinsDead = false;        banditsDead = false;        spellbookCount = 0;        spokenToMan = 0;        hasQuest1 = 0;        inventory = " ";        item = "";        event = "";        disease = "";        wares = "";        questLog = "";        location = 1;        dead = false;        whetherHasBeenInR17 = 0;        r1Count = 0;        r2Count = 0;        r3Count = 0;        r4Count = 0;        r5Count = 0;        r6Count = 0;        r7Count = 0;        r8Count = 0;        r9Count = 0;        r10Count = 0;        r11Count = 0;        r12Count = 0;        r13Count = 0;        r14Count = 0;        itemNum = 0;        goldNum = 0;        r01.setCommandCount(0);        r02.setCommandCount(0);        r03.setCommandCount(0);        r04.setCommandCount(0);        r05.setCommandCount(0);        r06.setCommandCount(0);        r07.setCommandCount(0);        r08.setCommandCount(0);        r09.setCommandCount(0);        r10.setCommandCount(0);        r11.setCommandCount(0);        r12.setCommandCount(0);        r13.setCommandCount(0);        r14.setCommandCount(0);        r15.setCommandCount(0);        r16.setCommandCount(0);        r17.setCommandCount(0);        r18.setCommandCount(0);        r19.setCommandCount(0);        r20.setCommandCount(0);        r21.setCommandCount(0);        r22.setCommandCount(0);        r23.setCommandCount(0);        r24.setCommandCount(0);        r25.setCommandCount(0);        r26.setCommandCount(0);        r27.setCommandCount(0);        r28.setCommandCount(0);        r29.setCommandCount(0);        r30.setCommandCount(0);        r31.setCommandCount(0);        r32.setCommandCount(0);        r33.setCommandCount(0);        r34.setCommandCount(0);        r35.setCommandCount(0);        r36.setCommandCount(0);        r37.setCommandCount(0);        r38.setCommandCount(0);        r39.setCommandCount(0);        r40.setCommandCount(0);        r41.setCommandCount(0);        jail.setCommandCount(0);        secretRoom.setCommandCount(0);        assignRooms();    }    /**     * Assigns descriptions to each room 1-41.     */    private void assignRooms()    {        r01.setDescription("a small cabin. All that lies inside it is a table with a single chair. On top of the table is a(n) map");        chooseDescription();        r02.setDescription(randDescription);        chooseDescription();        r03.setDescription(randDescription);        chooseDescription();        r04.setDescription(randDescription);        chooseDescription();        r05.setDescription(randDescription);        chooseDescription();        r06.setDescription(randDescription);        chooseDescription();        r07.setDescription(randDescription);        chooseDescription();        r08.setDescription(randDescription);        chooseDescription();        r09.setDescription(randDescription);        chooseDescription();        r10.setDescription(randDescription);        chooseDescription();        r11.setDescription(randDescription);        chooseDescription();        r12.setDescription(randDescription);        r13.setDescription("space in front of the city gate. Guards line the path in front of you and will likely make entry difficult");        chooseDescription();        r14.setDescription(randDescription);        chooseDescription();        r15.setDescription(randDescription);        chooseDescription();        r16.setDescription(randDescription);        r17.setDescription("a small house. It is relatively empty except for a strange deformed creature in the corner. The creature is staring at you and seems to want something. You get the feeling this is the work of a curse");        chooseDescription();        r18.setDescription(randDescription);        chooseDescription();        r19.setDescription(randDescription);        r20.setDescription("the city market where merchants are calling out to the passerbys. One rather shady looking merchant calls out to you and is hoping for you to buy his wares");        r21.setDescription("the city center. It is a wide open space formed by a circle of buildings. People are crowding the streets");        r22.setDescription("the city chapel. Inside is a priest who is offering holywater for anyone that can bring him an inkwell");        chooseDescription();        r23.setDescription(randDescription);        chooseDescription();        r24.setDescription(randDescription);        chooseDescription();        r25.setDescription(randDescription);        chooseDescription();        r26.setDescription(randDescription);        chooseDescription();        r27.setDescription(randDescription);        chooseDescription();        r28.setDescription(randDescription);        r29.setDescription("the castle. The king lies at the end of a great hall lined with a multitude of guards. The king's trusted advisor stands beside him and a servant waits near where you entered to deliver messages to the king from visitors");        chooseDescription();        r30.setDescription(randDescription);        chooseDescription();        r31.setDescription(randDescription);        chooseDescription();        r32.setDescription(randDescription);        chooseDescription();        r33.setDescription(randDescription);        chooseDescription();        r34.setDescription(randDescription);        chooseDescription();        r35.setDescription(randDescription);        chooseDescription();        r36.setDescription(randDescription);        chooseDescription();        r37.setDescription(randDescription);        chooseDescription();        r38.setDescription(randDescription);        chooseDescription();        r39.setDescription(randDescription);        chooseDescription();        r40.setDescription(randDescription);        r41.setDescription("an evil lair. The evil mage who is trying to take over the kingdom stands before you blocking your escape. However, behind you there is a pile of documents that would prove his villainy and a barrel of oil for the lamps that light up the cave");        currentRoom = r01;        setExits();    }    /**     * Chooses a random description from the given list while making sure their is a set amount of each kind of room.     */    private void chooseDescription()    {        Random rand = new Random();        while(true)        {            int randNum = rand.nextInt(1400) + 1;            if(randNum < 100 && r1Count != 4)            {                createItems();                createEvents();                randDescription = "a wide field with a(n) " + event + " in it. On the ground beside you lies a(n) " + item;                r1Count += 1;                break;            }            else if(randNum < 200 && r2Count != 3)            {                createItems();                createEvents();                randDescription = "a dark cave with a(n) " + event + " in it. A(n) " + item + " lies on top of the rocks around you";                r2Count += 1;                break;            }            else if(randNum < 300 && r3Count != 2)            {                createItems();                createEvents();                randDescription = "a dark shack with a(n) " + event + " in it. There is a table in the center with a(n) " + item + " on top of it";                r3Count += 1;                break;            }            else if(randNum < 400 && r4Count != 2)            {                createItems();                createEvents();                randDescription = "a small store. There are a variety of goods around you, including a(n) " + item + " but to take them would be stealing. If you want the items you should talk to the shopkeeper and buy them";                r4Count += 1;                break;            }            else if(randNum < 500 && r5Count != 4)            {                createItems();                createEvents();                randDescription = "a thick forest with a(n) " + event + " in it. In the center is a tree with a hole in it. Inside the hole is a(n) " + item;                r5Count += 1;                break;            }            else if(randNum < 600 && r6Count != 2)            {                createItems();                createEvents();                randDescription = "a small village. A(n) " + event + " is in the center and the people are all hiding in their homes. Also, on the ground lies a(n) " + item;                r6Count += 1;                break;            }            else if(randNum < 700 && r7Count != 2)            {                createItems();                createEvents();                randDescription = "a canyon. It runs on for what seems like forever and a little stream lines the bottom. In the distance you can see a(n) " + event + " and a(n) " + item;                r7Count += 1;                break;            }            else if(randNum < 800 && r8Count != 2)            {                createItems();                createEvents();                randDescription = "a tundra. Snow covers the ground and you are struggling to move in the cold, but you see a(n) " + item + " under a pile of snow. Also, a(n) " + event + " is in the distance";                r8Count += 1;                break;            }            else if(randNum < 900 && r9Count != 2)            {                createItems();                createEvents();                randDescription = "a desert. There is a sweltering heat and sand covers everything, but there is an oasis in sight with a(n) " + item + " and a(n) " + event + " in it";                r9Count += 1;                break;            }            else if(randNum < 1000 && r10Count != 2)            {                createItems();                createEvents();                randDescription = "a savanna. It is a flat grassy piece of land with a few large rocks in it. On the rocks is a pair of wild animals that seem to be gaurding something. Also, a(n) " + item + " is hidden in the grass near your location";                r10Count += 1;                break;            }            else if(randNum < 1100 && r11Count != 2)            {                createItems();                createEvents();                randDescription = "a bandit camp. There is some gold in a corner of the camp and a large group of bandits protecting it";                 r11Count += 1;                break;            }            else if(randNum < 1200 && r12Count != 2)            {                createItems();                createEvents();                randDescription = "a goblin cave. It houses a few measely goblins and a goblin-king behind them";                r12Count += 1;                break;            }            else if(randNum < 1300 && r13Count != 2)            {                createItems();                createEvents();                randDescription = "some ruins. Crumbled stone structures are scattered everywhere, and a(n) " + item + " is under a stone in front of you. Also, a(n) " + event + " lies in the back of the ruins";                r13Count += 1;                break;            }            else if(randNum < 1400 && r14Count != 2)            {                createItems();                createEvents();                randDescription = "a grassy area at a lakeside. In the mud is a(n) " + item + " and hovering over the lake is a ghost like form of a woman";                r14Count += 1;                break;            }        }        jail.setDescription("a compact jail cell. It is empty except for a small bed and a door with a rusty keyhole, but across from your cell is an imprisoned man");        secretRoom.setDescription("a secret room in the cabin you started in. It's dark and you can't see a thing");    }    /**     * Sets exits for each room.     */    private void setExits()    {        r01.setExits(r03,null,null,null);        r02.setExits(r06,r03,null,null);        r03.setExits(r07,r04,r01,r02);        r04.setExits(r08,null,null,r03);        r05.setExits(r11,r06,null,null);        r06.setExits(r12,r07,r02,r05);        r07.setExits(r13,r08,r03,r06);        r08.setExits(r14,r09,r04,r07);        r09.setExits(r15,null,null,r08);        r10.setExits(r18,r11,null,null);        r11.setExits(r19,r12,r05,r10);        r12.setExits(null,r13,r06,r11);        r13.setExits(null,r14,r07,r12);        r14.setExits(null,r15,r08,r13);        r15.setExits(r23,r16,r09,r14);        r16.setExits(r24,null,null,r15);        r17.setExits(null,r18,null,null);        r18.setExits(r26,r19,r10,r17);        r19.setExits(r27,null,r11,r18);        r20.setExits(null,r21,null,null);        r21.setExits(r29,r22,r13,r20);        r22.setExits(null,null,null,r21);        r23.setExits(r31,r24,r15,null);        r24.setExits(r32,r25,r16,r23);        r25.setExits(null,null,null,r24);        r26.setExits(null,r27,r18,null);        r27.setExits(r33,r28,r19,r26);        r28.setExits(r34,null,null,r27);        r29.setExits(null,null,r21,null);        r30.setExits(r36,r31,null,null);        r31.setExits(r37,r32,r23,r30);        r32.setExits(null,null,r24,r31);        r33.setExits(null,r34,r27,null);        r34.setExits(r38,r35,r28,r33);        r35.setExits(r39,r36,null,r34);        r36.setExits(r40,r37,r30,r35);        r37.setExits(null,null,r31,r36);        r38.setExits(null,r39,r34,null);        r39.setExits(null,r40,r35,r38);        r40.setExits(null,null,r36,r39);        r41.setExits(null,null,null,null);        secretRoom.setExits(r01,null,null,null);    }    /**     * Chooses a random item for making room descriptions.     */    private void createItems()    {        Random rand = new Random();        int randItem = rand.nextInt(11) + 1;        if(randItem == 1)        {            item = ("stick");        }        else if(randItem == 2)        {            item = ("sword");        }        else if(randItem == 3)        {            item = ("rock");        }        else if(randItem == 4)        {            item = ("torch");        }        else if(randItem == 5)        {            item = ("note");        }        else if(randItem == 6)        {            item = ("gem");        }        else if(randItem == 7)        {            item = ("key");        }        else if(randItem == 8)        {            item = ("inkwell");        }        else if(randItem == 9)        {            item = ("lockpick");        }        else if(randItem == 10)        {            item = ("shield");        }        else if(randItem == 11)        {            item = ("gold");        }    }    /**     * Chooses a random event for making event descriptions.     */    private void createEvents()    {        Random rand = new Random();        int randEvent = rand.nextInt(5) + 1;        if(randEvent == 1)        {            event = "goblin";        }        else if(randEvent == 2)        {            event = "bandit";        }        else if(randEvent == 3)        {            event = "strange-rock";        }        else if(randEvent == 4)        {            event = "corpse";        }        else if(randEvent == 5)        {            event = "strange-plant";        }    }    /**     * Creates a map that shows where you are on it.     */    private String map()    {        mapImage = "                     ____\n                ____l_41_l____\n           ____l_38_l_39_l_40_l____\n      ____l_33_l_34_l_35_l_36_l_37_l____\n ____l_26_l_27_l_28_l_29_l_30_l_31_l_32_l____\nl_17_l_18_l_19_l_20_l_21_l_22_l_23_l_24_l_25_l\n     l_10_l_11_l_12_l_13_l_14_l_15_l_16_l\n          l_05_l_06_l_07_l_08_l_09_l\n               l_02_l_03_l_04_l\n                    l_01_l\n";        if(location > 9)        {            mapImage = mapImage.substring(0,mapImage.indexOf(""+location)) + "**" + mapImage.substring(mapImage.indexOf(""+location)+2,mapImage.length());        }        else        {            mapImage = mapImage.substring(0,mapImage.indexOf("0"+location)) + "**" + mapImage.substring(mapImage.indexOf("0"+location)+2,mapImage.length());        }        return mapImage;    }    /**     * Finds your current location for the map's use.     */    private void findLocation()    {        if(currentRoom == r01)            location = 1;        else if(currentRoom == r02)            location = 2;        else if(currentRoom == r03)            location = 3;        else if(currentRoom == r04)            location = 4;        else if(currentRoom == r05)            location = 5;        else if(currentRoom == r06)            location = 6;        else if(currentRoom == r07)            location = 7;        else if(currentRoom == r08)            location = 8;        else if(currentRoom == r09)            location = 9;        else if(currentRoom == r10)            location = 10;        else if(currentRoom == r11)            location = 11;        else if(currentRoom == r12)            location = 12;        else if(currentRoom == r13)            location = 13;        else if(currentRoom == r14)            location = 14;        else if(currentRoom == r15)            location = 15;        else if(currentRoom == r16)            location = 16;        else if(currentRoom == r17)            location = 17;        else if(currentRoom == r18)            location = 18;        else if(currentRoom == r19)            location = 19;        else if(currentRoom == r20)            location = 20;        else if(currentRoom == r21)            location = 21;        else if(currentRoom == r22)            location = 22;        else if(currentRoom == r23)            location = 23;        else if(currentRoom == r24)            location = 24;        else if(currentRoom == r25)            location = 25;        else if(currentRoom == r26)            location = 26;        else if(currentRoom == r27)            location = 27;        else if(currentRoom == r28)            location = 28;        else if(currentRoom == r29)            location = 29;        else if(currentRoom == r30)            location = 30;        else if(currentRoom == r31)            location = 31;        else if(currentRoom == r32)            location = 32;        else if(currentRoom == r33)            location = 33;        else if(currentRoom == r34)            location = 34;        else if(currentRoom == r35)            location = 35;        else if(currentRoom == r36)            location = 36;        else if(currentRoom == r37)            location = 37;        else if(currentRoom == r38)            location = 38;        else if(currentRoom == r39)            location = 39;        else if(currentRoom == r40)            location = 40;        else if(currentRoom == r41)            location = 41;    }    /**     * Main play routine.  Loops until end of play.     */    public void play()     {         setUp();        currentRoom = r01;        printWelcome();        while (!finished && !dead)        {            Command command = parser.getCommand();            finished = processCommand(command);            if(inventory.indexOf("spellbook") > -1 && spellbookCount == 0)            {                spellbookCount = 1;            }            if(captureCount == 5)            {                System.out.println("Without warning a group of robed men rush in and knock you out. You eventually are brought to some dark cave and awaken to notice the evil mage and advisor to the king.");                currentRoom = r41;                System.out.println(currentRoom.longDescription());                captureCount = 0;                noticed = false;                questLog = questLog + quest6;                end = true;                System.out.println("Your quests have been updated.");            }        }        System.out.println("Thank you for playing. Goodbye.");    }    /**     * Print out the opening message for the player.     */    private void printWelcome()    {        System.out.println("\f");        System.out.println("You awaken without the faintest idea of who you are. In order to learn the truth you look around the room.");        System.out.println("Hint: Get the map and check your quests.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command)     {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("move"))        {            goRoom(command);        } else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        else if(commandWord.equals("get"))        {            getItem(command);        }        else if(commandWord.equals("drop"))        {            dropItem(command);        }        else if(commandWord.equals("interact"))        {            interactThing(command);        }        else if(commandWord.equals("inventory"))        {            for(int i = 0; i < inventory.length()-2; i++)            {                if(inventory.substring(i,i+1).equals(" ") && inventory.substring(i+1,i+2).equals(" "))                {                    inventory = inventory.substring(0,i+1) + inventory.substring(i+2,inventory.length());                }            }            System.out.println("Inventory: " + inventory);        }        else if(commandWord.equals("gold"))        {            System.out.println("Gold: " + goldNum);        }        else if(commandWord.equals("buy"))        {            buyItem(command);        }        else if(commandWord.equals("sell"))        {            sellItem(command);        }        else if(commandWord.equals("back"))        {            back(command);        }        else if(commandWord.equals("look"))        {            look(command);        }        else if(commandWord.equals("inspect"))        {            inspectItem(command);        }        else if(commandWord.equals("quests"))        {            System.out.println("Quests: " + questLog);        }        else if(commandWord.equals("1") && (currentRoom.getDescription().indexOf("store") > -1 || currentRoom == r20))        {            makeWares();            System.out.println("The shopkeeper has these wares: " + wares);        }        else if(commandWord.equals("2") && (currentRoom.getDescription().indexOf("store") > -1 || currentRoom == r20))        {            System.out.println("You can sell these items for gold: " + inventory);        }        return false;    }    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the      * command words.     */    private void printHelp()     {        System.out.println("You are a wanderer who searches for meaning to their life.");        System.out.println();        System.out.println("Your command words are:");        System.out.println("move + direction - allows you to move in a certain direction to enter a new room");        System.out.println("quit - allows you to exit the game");        System.out.println("help - shows your different command words");        System.out.println("get + item - allows you to pick up an item and puts it in your inventory");        System.out.println("drop + item - allows you to drop an item that you are carrying");        System.out.println("interact + event - triggers different things depending on the items you have and other statistics");        System.out.println("inventory - shows you what items you have");        System.out.println("gold - shows you how much gold you have");        System.out.println("buy + item - allows you to purchase an item if you have enough gold and the shopkeeper has it");        System.out.println("sell + item - allows you to sell an item you have for gold");        System.out.println("back - brings you back to your previous room");        System.out.println("look - prints out the current room description in case you forgot it");        System.out.println("inspect + item - gives you an item description or shows it to you depending on what it is");        System.out.println("quests - shows you what quests you have yet to complete");    }    /**     * Command to inspect an item which either gives a description of it or shows it to help the player know how it might be used.     */    private void inspectItem(Command command)    {        if(!command.hasSecondWord())        {            System.out.println("Inspect what?");            return;        }         else if(inventory.indexOf(command.getSecondWord()) > -1 && itemList.indexOf(command.getSecondWord()) > -1)        {            if(command.getSecondWord().equals("stick"))            {                System.out.println("This is a stick. It's from a tree, and most likely useless.");            }            else if(command.getSecondWord().equals("sword"))            {                System.out.println("This is a sword. It's made of steel, and will likely help you deal with enemies.");            }            else if(command.getSecondWord().equals("shield"))            {                System.out.println("This is a shield. It's made of iron and leather, and will likely help protect you in dangerous situations.");            }            else if(command.getSecondWord().equals("rock"))            {                System.out.println("This is a rock.");            }            else if(command.getSecondWord().equals("torch"))            {                System.out.println("This is a torch. It looks like it would be helpful when in dark places.");            }            else if(command.getSecondWord().equals("note"))            {                System.out.println("This is a note. It gives directions to some treasure: Go to a certain cabin. There you should pull at the table to reveal the cave where the treasure lies.");            }            else if(command.getSecondWord().equals("gem"))            {                System.out.println("This is a gem. It has a beautiful luster and would likely sell for a high price.");            }            else if(command.getSecondWord().equals("inkwell"))            {                System.out.println("This is an inkwell. It is a helpful tool for writing.");            }            else if(command.getSecondWord().equals("lockpick"))            {                System.out.println("This is a lockpick. It might come in handy when doing something questionable.");            }            else if(command.getSecondWord().equals("meat"))            {                System.out.println("This is a piece of meat. Animals would find this quite appetizing.");            }            else if(command.getSecondWord().equals("shovel"))            {                System.out.println("This is a shovel. With this you can dig.");            }            else if(command.getSecondWord().equals("pick"))            {                System.out.println("This is a pick. It can be used to break through rock.");            }            else if(command.getSecondWord().equals("holywater"))            {                System.out.println("This is a bottle of holywater. It is well known for its ability to reverse curses.");            }            else if(command.getSecondWord().equals("potion"))            {                System.out.println("This is a potion. It can heal most wounds.");            }            else if(command.getSecondWord().equals("spellbook"))            {                System.out.println("This is a spellbook. It is full of writing you don't understand, but you were able to decipher a portion of it and learned a spell to create explosions.");            }            else if(command.getSecondWord().equals("map"))            {                System.out.println(map());            }            else if(command.getSecondWord().equals("key"))            {                System.out.println("This is a key. You don't know what it unlocks but it might be smart to keep it with you.");            }            else if(command.getSecondWord().equals("oil"))            {                System.out.println("This is used to light lamps and torches. It is a rather slippery substance.");            }            else if(command.getSecondWord().equals("documents"))            {                System.out.println("These are documents that proove the king's advisor is plotting against the king.");            }            else if(command.getSecondWord().equals("herb"))            {                System.out.println("This is an herb. It is known fro its healing properties..");            }            else if(command.getSecondWord().equals("goblin-king-eye"))            {                System.out.println("This is an eye of a goblin king. It is large with a shiny red glow.");            }            else if(command.getSecondWord().equals("ectoplasm"))            {                System.out.println("This is ectoplasm. It is a translucent blue and is known as a wonderful alchemic ingredient.");            }            else if(command.getSecondWord().equals("grand-gem"))            {                System.out.println("This is a grand-gem. It's said that if you eat one of these you will gain immortality.");            }        }        else        {            System.out.println("That item is not in your inventory.");        }    }    /**     * Command to bring the player back to their previous location.     */    private void back(Command command)    {        if (lastRoom == null)            System.out.println("There is no room to go back to.");        else         {            newLastRoom = currentRoom;            currentRoom = lastRoom;            lastRoom = newLastRoom;            System.out.println("You moved back to your previous location.");            findLocation();            System.out.println(currentRoom.longDescription());        }    }    /**     * Command to show the player the description of their current room incase they forgot it or want to check for changes.     */    private void look(Command command)    {        System.out.println(currentRoom.longDescription());    }    /**     * Command used to buy from the shopkeeper or merchant.     */    private void buyItem(Command command)    {        if(!command.hasSecondWord())        {            System.out.println("Buy what?");            return;        }        if(wares.indexOf(command.getSecondWord()) > -1)        {            if(itemNum < CARRYING_CAPACITY)            {                String item = command.getSecondWord();                if(command.getSecondWord().equals("sword"))                {                    if(goldNum >= 2)                    {                        goldNum = goldNum - 2;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("shield"))                {                    if(goldNum >= 2)                    {                        goldNum = goldNum - 2;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("pick"))                {                    if(goldNum >= 3)                    {                        goldNum = goldNum - 3;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("shovel"))                {                    if(goldNum >= 3)                    {                        goldNum = goldNum - 3;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("meat"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("gem"))                {                    if(goldNum >= 3)                    {                        goldNum = goldNum - 3;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("potion"))                {                    if(goldNum >= 2)                    {                        goldNum = goldNum - 2;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("holywater"))                {                    if(goldNum >= 5)                    {                        goldNum = goldNum - 5;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("spellbook"))                {                    if(goldNum >= 4)                    {                        goldNum = goldNum - 4;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("stick"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("rock"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("torch"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("key"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("inkwell"))                {                    if(goldNum >= 2)                    {                        goldNum = goldNum - 2;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                else if(command.getSecondWord().equals("lockpick"))                {                    if(goldNum >= 1)                    {                        goldNum = goldNum - 1;                        System.out.println("You now have " + goldNum + " gold.");                    }                    else                    {                        System.out.println("You don't have enough gold to purchase that item.");                        return;                    }                }                inventory = inventory + command.getSecondWord() + " ";                itemNum += 1;                System.out.println("You bought a(n) " + item + ".");            }            else            {                System.out.println("You can't carry anymore items.");            }        }        else        {            System.out.println("That item cannot be found.");        }    }    /**     * Command to allow the player to sell items they have for gold with a merchant or shopkeeper.     */    private void sellItem(Command command)    {        if(!command.hasSecondWord())        {            System.out.println("Sell what?");            return;        }        if(inventory.indexOf(command.getSecondWord()) > -1)        {            String item = command.getSecondWord();            inventory = inventory.substring(0, inventory.indexOf(command.getSecondWord())) + inventory.substring(inventory.indexOf(command.getSecondWord()) + command.getSecondWord().length(), inventory.length());            itemNum -= 1;            if(item.equals("sword") || item.equals("shield") || item.equals("gem") || item.equals("holwater"))            {                goldNum += 3;            }            else            {                goldNum += 1;            }            System.out.println("You sold an item. You now have " + goldNum + " gold.");        }        else        {            System.out.println("You don't have that item in your inventory.");        }    }    /**      * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command)     {        if(!command.hasSecondWord())        {            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        lastRoom = currentRoom;        Room nextRoom = currentRoom.nextRoom(direction);        if (nextRoom == null)            System.out.println("You cannot go that way!");        else         {            System.out.println("\f");            System.out.println("\n");            currentRoom = nextRoom;            findLocation();            System.out.println(currentRoom.longDescription());            if(currentRoom == r17 && whetherHasBeenInR17 == 0)            {                questLog = questLog + quest2;                System.out.println("Your quests have been updated.");                whetherHasBeenInR17 = 1;            }            if(currentRoom == r29 && end == true)            {                if(inventory.indexOf("documents") > -1)                {                    System.out.println("You deliver the documents to the king and he learns of the betrayal of his advisor. You are thanked greatly and given a high position as the king's new advisor.");                    System.out.println("You are extremely happy until you realize you never learned a thing about your identity. All of a sudden your head begins to ache and you fall to the ground.");                    System.out.println("...");                    System.out.println("\f");                    System.out.println("You awaken in a small bed in the cabin where you first started. The place is empty, but not your memories. You now remember that you were actually paid to do this quest and save the kingdom when you had an accident and lost your memories.");                    System.out.println("Congratulations. You completed the game.");                    finished = true;                }                else                {                    System.out.println("You have no proof of the mage's villainy and you can't go back to the lair.");                    finished = true;                }            }            if(noticed == true)            {                captureCount += 1;            }        }    }    /**     * Command to alow picking up items. Only works on the amount of times their are items in a room unless you dropped an item then you can pick it back up.     */    private void getItem(Command command)     {        if(!command.hasSecondWord())        {            System.out.println("Get what?");            return;        }        String item = command.getSecondWord();        if(itemList.indexOf(command.getSecondWord()) > -1 && (currentRoom.getCommandCount() < currentRoom.getCommandCountLimit() || currentRoom.getDescription().substring(currentRoom.getDescription().lastIndexOf(command.getSecondWord())+command.getSecondWord().length(),currentRoom.getDescription().length()).equals(" that you dropped on the ground")) && currentRoom.getDescription().indexOf(command.getSecondWord()) > -1 &&  itemList.substring(itemList.indexOf(command.getSecondWord())+command.getSecondWord().length(),itemList.indexOf(command.getSecondWord())+command.getSecondWord().length()+1).equals(" ") && itemList.substring(itemList.indexOf(command.getSecondWord())-1,itemList.indexOf(command.getSecondWord())).equals(" "))        {            lastCommand = command.getSecondWord();            if(currentRoom.getCommandCountLimit() > 1)            {                if(!command.getSecondWord().equals(lastCommand))                {                    if(itemNum < CARRYING_CAPACITY)                    {                        if(!command.getSecondWord().equals("gold"))                        {                            inventory = inventory + item + " ";                            itemNum += 1;                        }                        else if(command.getSecondWord().equals("pile-of-gold"))                        {                            goldNum += 10;                        }                        else                        {                            goldNum += 1;                        }                        if(currentRoom.getDescription().substring(currentRoom.getDescription().lastIndexOf(command.getSecondWord())+command.getSecondWord().length(),currentRoom.getDescription().length()).equals(" that you dropped on the ground"))                        {                            currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().lastIndexOf(".",currentRoom.getDescription().length()-1)));                        }                        else                        {                            currentRoom.setCommandCount(currentRoom.getCommandCount()+1);                            currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                        }                        System.out.println("You picked up a(n) " + item + ".");                    }                    else                    {                        System.out.println("You can't carry anymore items.");                    }                }                else                {                    System.out.println("That item cannot be found.");                }            }            else            {                if(itemNum < CARRYING_CAPACITY)                {                    if(!command.getSecondWord().equals("gold"))                    {                        inventory = inventory + item + " ";                        itemNum += 1;                    }                    else if(command.getSecondWord().equals("pile-of-gold"))                    {                        goldNum += 10;                    }                    else                    {                        goldNum += 1;                    }                    if(currentRoom.getDescription().substring(currentRoom.getDescription().lastIndexOf(command.getSecondWord())+command.getSecondWord().length(),currentRoom.getDescription().length()).equals(" that you dropped on the ground"))                    {                        currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().lastIndexOf(".",currentRoom.getDescription().length()-1)));                    }                    else                    {                        currentRoom.setCommandCount(currentRoom.getCommandCount()+1);                        currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    }                    System.out.println("You picked up a(n) " + item + ".");                    if(currentRoom.getDescription().indexOf("shopkeeper") > -1 || currentRoom.getDescription().indexOf("merchant") > -1)                    {                        System.out.println("You were arrested for stealing and have been brought to jail. All of your items have been taken except for anything small that might have been overlooked.");                        currentRoom = jail;                        inventoryCopy = inventory;                        if(inventory.indexOf("lockpick") > -1)                        {                            inventory = inventory.substring(inventory.indexOf("lockpick"), inventory.indexOf("lockpick") + 8);                        }                        else                        {                            inventory = "";                        }                        System.out.println("\f");                        System.out.println("\n");                        System.out.println(currentRoom.longDescription());                    }                    if(command.getSecondWord().equals("map") && currentRoom == r01 && hasQuest1 == 0)                    {                        questLog = questLog + quest1;                        System.out.println("Your quests have been updated.");                        hasQuest1 += 1;                    }                }                else                {                    System.out.println("You can't carry anymore items.");                }            }        }        else        {            System.out.println("That item cannot be found.");        }    }    /**     * Command for dropping items in your inventory. Puts them in the room you are in, so they can be picked back up later.     */    private void dropItem(Command command)     {        if(!command.hasSecondWord())        {            System.out.println("Drop what?");            return;        }        if(itemList.indexOf(command.getSecondWord()) > -1)        {            String item = command.getSecondWord();        }        if(inventory.indexOf(command.getSecondWord()) > -1 && inventory.substring(inventory.indexOf(command.getSecondWord())+command.getSecondWord().length(),inventory.indexOf(command.getSecondWord())+command.getSecondWord().length()+1).equals(" ") && inventory.substring(inventory.indexOf(command.getSecondWord())-1,inventory.indexOf(command.getSecondWord())).equals(" "))        {            inventory = inventory.substring(0, inventory.indexOf(command.getSecondWord())) + inventory.substring(inventory.indexOf(command.getSecondWord()) + command.getSecondWord().length(), inventory.length());            itemNum -= 1;            System.out.println("You dropped an item.");            currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) " + command.getSecondWord() + " that you dropped on the ground");        }        else        {            System.out.println("You don't have that item in your inventory.");        }    }    /**     * Gets a random disease.     */    private void chooseDisease()    {        Random rand = new Random();        int randDisease = rand.nextInt(3) + 1;        if(randDisease == 1)        {            disease = "tuberculosis";        }        else if(randDisease == 2)        {            disease = "smallpox";        }        else if(randDisease == 3)        {            disease = "the bubonic plague";        }    }    /**     * Gets a random set of wares for whenever you talk to a merchant or shopkeeper.     */    private void makeWares()    {        Random rand = new Random();        int randWares = rand.nextInt(5) + 1;        if(randWares == 1)        {            wares = "meat gem spellbook";        }        else if(randWares == 2)        {            wares = "shield shovel holywater";        }        else if(randWares == 3)        {            wares = "sword pick potion";        }        else if(randWares == 4)        {            wares = "stick rock torch";        }        else if(randWares == 5)        {            wares = "key inkwell lockpick";        }    }    /**     * Command for interact with an event. Events are part of the room descriptions and usually require certain items.     */    private void interactThing(Command command)     {        if(!command.hasSecondWord())        {            System.out.println("Interact with what?");            return;        }        if(eventList.indexOf(command.getSecondWord()) > -1 && currentRoom.getEventCount() < MAX_USE_OF_EVENT)        {            if(command.getSecondWord().equals("goblin") && currentRoom.getDescription().indexOf("goblin") > -1)            {                if(currentRoom.getDescription().indexOf("goblin-king") == -1)                {                    System.out.println("The goblin notices you and begins to ready an attack.");                    if(inventory.indexOf("sword") > -1)                    {                        System.out.println("You luckily had a sword on you and manage to defeat the goblin.");                        currentRoom.setEventCount(1);                        currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    }                    else                    {                        System.out.println("You realize you have nothing to defend yourself with and end up taking the blow with your head. Your life quickly drains away and you die.");                        dead = true;                    }                }            }            else if(currentRoom.getDescription().indexOf("goblin-king") > -1 && command.getSecondWord().equals("goblin-king"))            {                if(goblinsDead == false)                {                    System.out.println("You can't reach the goblin-king without killing the weak goblins in front of him.");                }                else                {                    if(inventory.indexOf("sword") > -1 && inventory.indexOf("shield") > -1)                    {                        System.out.println("You luckily had a sword as well as a shield on you which you use to block the goblin-king's powerful blows. After a while, you see an opening and stab the goblin-king with your sword.");                        currentRoom.setEventCount(1);                        currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                        if(itemNum < CARRYING_CAPACITY)                        {                            inventory = inventory + "goblin-king-eye" + " ";                            System.out.println("You picked up the goblin-king-eye.");                            itemNum += 1;                        }                        else                        {                            System.out.println("You don't have enough room in your inventory to take the goblin-king-eye.");                            currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) goblin-king-eye that you dropped on the ground");                        }                    }                    else                    {                        System.out.println("You realize you have nothing to defend yourself with and end up getting struck with a heavy blow by the goblin-king. Your life quickly drains away and you die.");                        dead = true;                    }                 }            }            else if(command.getSecondWord().equals("goblins") && currentRoom.getDescription().indexOf("goblin-king") > -1)            {                if(inventory.indexOf("sword") > -1)                {                    System.out.println("You luckily had a sword on you and manage to take out the goblins.");                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-14) + "the location where some " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    goblinsDead = true;                }                else                {                    System.out.println("You realize you have nothing to defend yourself with and end up taking a blow from three separate goblins with your head. Your life quickly drains away and you die.");                    dead = true;                }            }            else if(command.getSecondWord().equals("bandit") && currentRoom.getDescription().indexOf("bandit") > -1)            {                System.out.println("The bandit notices you and begins to ready an attack, but he doesn't look too strong.");                if(inventory.indexOf("sword") > -1)                {                    System.out.println("You luckily had a sword on you and manage to defeat the bandit with ease.");                    currentRoom.setEventCount(1);                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                }                else                {                    Random rand = new Random();                    int randAtk = rand.nextInt(2) + 1;                    if(randAtk == 1)                    {                        System.out.println("You tried to take the bandit out with your fists because you had no weapon, but failed. The bandit killed you with a single stab to the heart.");                        dead = true;                    }                    else if(randAtk == 2)                    {                        System.out.println("You had no sword to fight with, so you had to use your fists. You got lucky and knocked the bandit out with a powerful punch, but it might be smart to keep a weapon on hand from now on.");                        currentRoom.setEventCount(1);                        currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    }                }            }            else if(command.getSecondWord().equals("bandits") && currentRoom.getDescription().indexOf("bandit camp") > -1)            {                System.out.println("The group of bandits notice you and unsheath their weapons.");                if(inventory.indexOf("sword") > -1)                {                    System.out.println("You luckily had a sword on you and manage to defeat the group of bandits.");                    currentRoom.setEventCount(1);                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-17) + "the location where a group of " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    banditsDead = true;                }                else                {                    System.out.println("You realize you have nothing to defend yourself with and end up taking multiple blows with your head. Your life quickly drains away and you die.");                    dead = true;                }            }            else if(command.getSecondWord().equals("strange-rock") && currentRoom.getDescription().indexOf("strange-rock") > -1)            {                if(inventory.indexOf("pick") > -1 && inventory.substring(inventory.indexOf("pick")+"pick".length(),inventory.indexOf("pick")+"pick".length()+1).equals(" ") && inventory.substring(inventory.indexOf("pick")-1,inventory.indexOf("pick")).equals(" "))                {                    System.out.println("You use your pick to break the rock and eventually find a grand-gem.");                    currentRoom.setEventCount(1);                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    if(itemNum < CARRYING_CAPACITY)                    {                        inventory = inventory + "grand-gem" + " ";                        System.out.println("You got a(n) grand-gem.");                        itemNum += 1;                    }                    else                    {                        System.out.println("You don't have enough room in your inventory to take the item.");                        currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) grand-gem that you dropped on the ground");                    }                }                else                {                    System.out.println("You don't have any items that you could use to inspect the strange-rock.");                }            }            else if(command.getSecondWord().equals("corpse") && currentRoom.getDescription().indexOf("corpse") > -1)            {                chooseDisease();                System.out.println("You touch the rotting corpse and suddenly begin feeling ill. You have now contracted " + disease + ".");                if(disease.equals("tuberculosis"))                {                    Random rand = new Random();                    String survival = "";                    int randRate = rand.nextInt(2) + 1;                    if(randRate == 1)                    {                        survival = "pull through";                    }                    else if(randRate == 2)                    {                        survival = "die";                    }                    System.out.println("The disease you contracted is quite powerful and greatly affects your lungs. You spend days in pain and eventually " + survival + ".");                    if(survival.equals("die"))                    {                        dead = true;                    }                }                else if(disease.equals("smallpox"))                {                    System.out.println("The disease you contracted is potent and soon lesions on the mucus membranes appear. However, you manage to pull through while only losing everything in your inventory.");                    inventory = "";                    itemNum = 0;                }                else if(disease.equals("the bubonic plague"))                {                    System.out.println("The disease you contracted is extremely deadly and your lymph nodes soon swell up. Eventually you are in too much pain to continue, and you die.");                    dead = true;                }            }            else if(command.getSecondWord().equals("strange-plant") && currentRoom.getDescription().indexOf("strange-plant") > -1)            {                createItems();                System.out.println("You pull up the strange plant, and a secret stash is revealed inside you find a(n) " + item +".");                currentRoom.setEventCount(1);                currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                if(itemNum < CARRYING_CAPACITY)                {                    inventory = inventory + item + " ";                    System.out.println("You got a(n) " + item + ".");                    itemNum += 1;                }                else                {                    System.out.println("You don't have enough room in your inventory to take the item.");                    currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) " + item + " that you dropped on the ground");                }            }            else if((command.getSecondWord().equals("shopkeeper") || command.getSecondWord().equals("merchant")) && (currentRoom.getDescription().indexOf("store") > -1 || currentRoom == r20))            {                System.out.println("You talk to the shopkeeper and he asks you what you would like to do, <1> buy or <2> sell?");                if(command.getCommandWord().equals("1"))                {                    makeWares();                    System.out.println("The shopkeeper has these wares: " + wares);                }                else if(command.getCommandWord().equals("2"))                {                    System.out.println("You can sell these items for gold: " + inventory);                }            }            else if(command.getSecondWord().equals("door") && currentRoom.getDescription().indexOf("jail") > -1)            {                if(inventory.indexOf("lockpick") > -1)                {                    System.out.println("You luckily have a lockpick with you and are able to break out of your cell. You soon escape into the city center after retrieving your items.");                    inventory = inventoryCopy;                    currentRoom = r21;                    location = 21;                    System.out.println(currentRoom.longDescription());                }                else                {                    System.out.println("You have no items with which you could open the door, making it impossible to open.");                }            }            else if(command.getSecondWord().equals("man") && currentRoom == jail)            {                if(questLog.indexOf(quest3) > -1)                {                    if(spokenToMan == 0)                    {                        if(questLog.indexOf(quest3) > -1)                        {                            System.out.println("You talk to the man in the cell across from you and he tells you of the evil plan of the king's new advisor. You are told he plans to soon gain complete control over the king and will soon rule the kingdom with the king as his puppet.");                            System.out.println("You realize you'll need to get out of jail and warn the king.");                            questLog = questLog + quest4;                            System.out.println("Your quests have been updated.");                        }                        else                        {                            System.out.println("The man doesn't want to talk.");                        }                    }                    else                    {                        System.out.println("You have already spoken to this man.");                    }                }                else                {                    System.out.println("You have nothing to talk about with the man across from you.");                }            }            else if(command.getSecondWord().equals("creature") && currentRoom == r17)            {                if(inventory.indexOf("holywater") > -1)                {                    System.out.println("You have a bottle of holywater with you which seems to get the creatures attention. You try pouring it over him and he slowly changes into a human form.");                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be where now stands a normal man" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    System.out.println("The man tells you he was cursed by an evil mage who is posing as the king's advisor and trying to take over the kingdom. You are told to get find a way to get into jail and see the old advisor to the king who should know more.");                    System.out.println("You don't see how this connects to your identity, but you feel it is important and accept.");                    questLog = questLog + quest3;                    System.out.println("Your quests have been updated.");                    currentRoom.setEventCount(1);                    inventory = inventory.substring(0,inventory.indexOf("holywater")) + inventory.substring(inventory.indexOf("holywater")+"holywater".length(),inventory.length());                    itemNum -= 1;                }                else                {                    System.out.println("You have nothing that seems to interest the little creature.");                }            }            else if(command.getSecondWord().equals("animals") && currentRoom.getDescription().indexOf("savanna") > -1)            {                if(inventory.indexOf("meat") > -1)                {                    System.out.println("You have some meat with you and use it to draw the attention of the beasts. They move and reveal a strange glowing herb.");                    currentRoom.setEventCount(1);                    inventory = inventory.substring(0,inventory.indexOf("meat")) + inventory.substring(inventory.indexOf("meat")+"meat".length(),inventory.length());                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    itemNum -= 1;                    if(itemNum < CARRYING_CAPACITY)                    {                        inventory = inventory + "herb" + " ";                        System.out.println("You picked up the herb.");                        itemNum += 1;                    }                    else                    {                        System.out.println("You don't have enough room in your inventory to take the herb.");                        currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) herb that you dropped on the ground");                    }                }                else                {                    System.out.println("You had nothing to use on the beasts but you still got them to notice you. They soon chase you down and maul you to death.");                    dead = true;                }            }            else if(command.getSecondWord().equals("ghost") && currentRoom.getDescription().indexOf("lake") > -1)            {                if(banditsDead == false)                {                    System.out.println("The ghost tells you that she wants you to go to a bandit camp and kill the bandits, so that she can pass on.");                }                else                {                    System.out.println("The ghost is overjoyed by your news and soon disappears, but after she gives you some ectoplasm as a reward.");                    currentRoom.setEventCount(1);                    currentRoom.setDescription(currentRoom.getDescription().substring(0,currentRoom.getDescription().indexOf(command.getSecondWord())-5) + "the location where a(n) " + command.getSecondWord() + " used to be" + currentRoom.getDescription().substring(currentRoom.getDescription().indexOf(command.getSecondWord())+command.getSecondWord().length(), currentRoom.getDescription().length()));                    if(itemNum < CARRYING_CAPACITY)                    {                        inventory = inventory + "ectoplasm" + " ";                        System.out.println("You picked up the ectoplasm.");                        itemNum += 1;                    }                    else                    {                        System.out.println("You don't have enough room in your inventory to take the ectoplasm.");                        currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) ectoplasm that you dropped on the ground");                    }                }            }            else if(currentRoom == r01 && command.getSecondWord().equals("table"))            {                System.out.println("You pull at the table and a secret room is revealed.");                r01.setExits(r03,null,secretRoom,null);                currentRoom.setEventCount(1);                System.out.println(currentRoom.longDescription());            }            else if(currentRoom == secretRoom && command.getSecondWord().equals("dark"))            {                if(inventory.indexOf("torch") > -1)                {                    System.out.println("You had a torch with you which you use to light up the room.");                    currentRoom.setEventCount(1);                    secretRoom.setDescription("a secret room in the cabin you started in. Your torch makes the room visible and you soon notice a(n) pile-of-gold");                    System.out.println(currentRoom.longDescription());                }                else                {                    System.out.println("You have no items that you could use to light up the room.");                }            }            else if(command.getSecondWord().equals("priest") && currentRoom == r22)            {                if(inventory.indexOf("inkwell") > -1)                {                    System.out.println("You have the inkwell the priest desired, so he gives you one bottle of holywater and thanks you.");                    inventory = inventory.substring(0,inventory.indexOf("inkwell")) + inventory.substring(inventory.indexOf("inkwell")+"inkwell".length(),inventory.length());                    if(itemNum < CARRYING_CAPACITY)                    {                        inventory = inventory + "holywater" + " ";                        System.out.println("You picked up the holywater");                        itemNum += 1;                    }                    else                    {                        System.out.println("You don't have enough room in your inventory to take the holywater.");                        currentRoom.setDescription(currentRoom.getDescription() + ". There is also a(n) holywater that you dropped on the ground");                    }                }                else if(inventory.indexOf("potion") > -1 && inventory.indexOf("grand-gem") > -1 && inventory.indexOf("herb") > -1 && inventory.indexOf("goblin-king-eye") > -1 && inventory.indexOf("ectoplasm") > -1)                {                     System.out.println("The priest takes some time and creates a super-potion for you. You accpet it with gratitude and are overjoyed after finally finishing it.");                    inventory = inventory.substring(0,inventory.indexOf("potion")) + inventory.substring(inventory.indexOf("potion")+"potion".length(),inventory.length());                    inventory = inventory.substring(0,inventory.indexOf("grand-gem")) + inventory.substring(inventory.indexOf("grand-gem")+"grand-gem".length(),inventory.length());                    inventory = inventory.substring(0,inventory.indexOf("herb")) + inventory.substring(inventory.indexOf("herb")+"herb".length(),inventory.length());                    inventory = inventory.substring(0,inventory.indexOf("goblin-king-eye")) + inventory.substring(inventory.indexOf("goblin-king-eye")+"goblin-king-eye".length(),inventory.length());                    inventory = inventory.substring(0,inventory.indexOf("ectoplasm")) + inventory.substring(inventory.indexOf("ectoplasm")+"ectoplasm".length(),inventory.length());                    itemNum -= 5;                    inventory = inventory + "super-potion" + " ";                }                else                {                    System.out.println("You have nothing to give the priest.");                }            }            else if(command.getSecondWord().equals("guards") && currentRoom == r13)            {                if(goldNum >= 1)                {                    System.out.println("The guards open the gate for you after a little bribe of one gold.");                    currentRoom.setEventCount(1);                    r13.setDescription("space in front of the city gate. Guards line the path in front of you but ignore you as you already paid them to let you in");                    goldNum -= 1;                    r13.setExits(r21,r14,r07,r12);                    System.out.println(currentRoom.longDescription());                }                else                {                    System.out.println("You have nothing that interests the guards and they continue to prevent your entry.");                }            }            else if(command.getSecondWord().equals("people") && currentRoom == r21)            {                if(spellbookCount > 0)                {                    System.out.println("You use your explosion spell on the people around you. They suddenly begin exploding one after another and eventually you go insane from the power. You are later arrested by the guards and executed.");                    dead = true;                }                else                {                    System.out.println("You have nothing to do with the people around you.");                }            }            else if(command.getSecondWord().equals("servant") && currentRoom == r29)            {                if(inventory.indexOf("super-potion") > -1)                {                    System.out.println("You deliver the super-potion to the king and are quickly accpeted. Meanwhile, the king's evil advisor takes notice of you.");                    noticed = true;                }                else if(questLog.indexOf(quest5) == -1)                {                    if(questLog.indexOf(quest4) > -1)                    {                        System.out.println("The servant tells you that it is impossible to meet with the king as he is troubled over his wife's disease. You hear the servant mumble that it would be great if they had a super potion.");                        questLog = questLog + quest5;                        System.out.println("your quests have been updated.");                    }                    else                    {                        System.out.println("The servant is too busy to talk with you.");                    }                }                else                {                    System.out.println("You still need to make the potion for the king's wife.");                }            }            else if(command.getSecondWord().equals("mage") && currentRoom == r41)            {                if(currentRoom.getDescription().indexOf("oil that you dropped on the ground") > -1)                {                    System.out.println("You rush towards the evil mage pushing him into the oil you spilled earlier. He falls to the ground and you are able to escape.");                    currentRoom = r39;                    System.out.println(currentRoom.longDescription());                }                else                {                    System.out.println("You have no advantage in this situation and would die as soon as you attempt to run, so you don't do a thing.");                }            }            else            {                System.out.println("That isn't an option.");            }        }        else        {            System.out.println("That isn't an option.");        }    }}