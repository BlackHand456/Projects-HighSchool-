import java.util.Random;/* * Class Room - a room in an adventure game. * * Author:  Michael Kolling * Version: 1.1 * Date:    August 2000 *  * This class is part of Zork. Zork is a simple, text based adventure game. * * "Room" represents one location in the scenery of the game.  It is  * connected to at most four other rooms via exits.  The exits are labelled * north, east, south, west.  For each direction, the room stores a reference * to the neighbouring room, or null if there is no exit in that direction. */class Room {    private String description;//description for rooms    private int commandCount;//the number of times one has used get in a room    private int commandCountLimit;//the max number of times you can use get in a room unless to pick up a dropped item    private int eventCount;//the number of times you've interacted with something     private Room north, south, east, west;//directions    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room(String description, int commandCount, int commandCountLimit, int eventCount)     {        this.description = description;        this.commandCount = commandCount;        this.commandCountLimit = commandCountLimit;        this.eventCount = eventCount;    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room theNorth, Room theEast, Room theSouth, Room theWest)     {        north = theNorth;        east = theEast;        south = theSouth;        west = theWest;    }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String shortDescription()    {        return description;    }    /**     * Return a long description of this room, on the form:     *     You are in the kitchen.     *     Exits: north west     */    public String longDescription()    {        return "You are in " + description + ".\n" + exitString();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     */    private String exitString()    {        String returnString = "Exits:";        if (north != null)            returnString += " north";        if (east != null)            returnString += " east";        if (south != null)            returnString += " south";        if (west != null)            returnString += " west";        return returnString;    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room nextRoom(String direction)     {        if (direction.equals("north"))            return north;        else if (direction.equals("east"))            return east;        else if (direction.equals("south"))            return south;        else if (direction.equals("west"))            return west;        else            return null;    }    /**     * Allows set the description of a room to something.     */    public void setDescription(String theDescription)    {        description = theDescription;    }    /**     * Returns a room's description.     */    public String getDescription()    {        return description;    }    /**     * Returns a room's command count.     */    public int getCommandCount()    {        return commandCount;    }    /**     * Allows one to set a rooms command count.     */    public void setCommandCount(int theCommandCount)    {        commandCount = theCommandCount;    }        /**     * returns a room's command count limit.     */    public int getCommandCountLimit()    {        return commandCountLimit;    }    /**     * Allows one to set a room's command count limit.     */    public void setCommandCountLimit(int theCommandCountLimit)    {        commandCountLimit = theCommandCountLimit;    }        /**     * Returns a room's event count.     */    public int getEventCount()    {        return eventCount;    }    /**     * Allows one to set a room's event count.     */    public void setEventCount(int theEventCount)    {        eventCount = theEventCount;    }}